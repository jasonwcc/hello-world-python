# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your IBM Kubernetes Service cluster, including deployment.yml, service.yml, etc.
# 2. Set up secrets in your workspace: ICR_NAMESPACE with the name of the project, IBM_CLOUD_API_KEY with an API key.
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE, IKS_CLUSTER and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to IKS

on:
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE: hello-python
  IKS_CLUSTER: bq1sm2gd0sjtps7ajoa0
  DEPLOYMENT_NAME: hello-python
  PORT: 5001

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

  ibmcloud:
    name: ibmcloud
    runs-on: ubuntu-latest
    steps:
    # Setup IBM Cloud CLI
    - name: Install IBM Cloud CLI
      uses: ibm/ibmcloud-action@0.0.2
      with:
        APIKEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        CLOUD_REGION: us-south

  build:
    name: Build
    needs: checkout
    runs-on: ubuntu-latest
    steps:
    # Build the Docker image
    # docker build -f Dockerfile -t us.icr.io/stevemar2/hello-python:latest .
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

  publish:
    name: Publish
    needs: checkout
    runs-on: ubuntu-latest
    steps:
    # Push the image to IBM Container Registry
    # docker push us.icr.io/stevemar2/hello-python:latest
    - name: Push the image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE:$GITHUB_SHA

    # Deploy the Docker image to the IKS cluster
    # TODO: Add support to run kubectl apply -f - on all top level .yaml files...
  deploy:
    name: Deploy
    needs: ibmcloud
    runs-on: ubuntu-latest
    steps:

    - name: Deploy to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o wide
